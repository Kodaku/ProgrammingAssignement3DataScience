install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
library(dplyr)
library(ggplot2)
library(statsr)
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
data(arbuthnot)
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
arbuthnot
View(arbuthnot)
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
# type your code for the Question 2 here, and Knit
arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
arbuthnot
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
# type your code for the Exercise here, and Knit
ggplot(data=arbuthnot, aes(x=year, y=boys)) + geom_point()
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
arbuthnot
data(present)
present
View(present)
# type your code for Question 4 here, and Knit
3
# type your code for Exercise here, and Knit
range(present$year)
View(present)
present <- present %>% mutate(total=boys+girls)
View(present)
present <- present %>% mutate(prop_boys=boys/total)
ggplot(data=present, aes(x=year, y=prop_boys)) + geom_line()
present <- present %>% mutate(more_boys=boys > girls)
View(present)
View(present)
present <- present $>% mutate(prop_boy_girl=boys/girls)
present <- present %>% mutate(prop_boy_girl=boys/girls)
ggplot(data=present, aes(x=year, y=prop_boy_girl)) + geom_point()
sort(present, decreasing = TRUE)
sort(present$year, decreasing = TRUE)
sort(present$total, decreasing = TRUE)
sort(present$total, decreasing = FALSE)
View(present)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
force(nycflights)
name(nycflights)
names(nycflights)
str(nycflights)
ggplot(data=nycflights, aes(x=dep_delay)) + geom_histogram()
ggplot(data=nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 15)
ggplot(data=nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>% filter(dest="RDU")
rdu_flights <- nycflights %>% filter(dest=="RDU")
ggplot(data=rdu_flights, aes(x=dep_delay)) + geom_histogram()
rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd=(dep_delay), n=n())
rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n=n())
sfo_feb_flights <- nycflights %>% filter(dest=="SFO", month==2)
sfo_feb_flights %>% summarise(n=n())
View(sfo_feb_flights)
View(sfo_feb_flights)
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) + geom_histogram()
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) + geom_histogram(binwidth = 15)
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) + geom_histogram(binwidth = 5)
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) + geom_histogram(binwidth = 1)
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) + geom_histogram()
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights %>% group_by(carrier) %>% summarise(interquartile_range=IQR(arr_delay), n=n())
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>% arrange(desc(mean_dd))
nycflights %>% group_by(month) %>% summarise(mean_dd = median(dep_delay)) %>% arrange(desc(mean_dd))
ggplot(data=nycflights, aes(x=dep_delay)) + geom_histogram()
ggplot(data=nycflights, aes=x=factor(month), y=dep_delay) + geom_boxplot()
ggplot(data=nycflights, aes(x=factor(month), y=dep_delay)) + geom_boxplot()
nycflights <- nycflights %>% mutate(dep_time = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>% group_by(origin) %>% summarise(ot_dep_rate = sum(dep_time == "on time") / n()) %>% arrange(desc(ot_dep_rate))
ggplot(data=nycflights, aes(x=origin, fill=dep_type)) + geom_bar()
ggplot(data=nycflights, aes(x=origin, fill = dep_time)) + geom_bar()
nycflights <- nycflights %>% mutate(avg_speed=mean(distance / air_time))
nycflights %>% group_by(tailnum) %>% arrange(desc(avg_speed))
nycflights %>% group_by(tailnum) %>% summarise(avg_speed=avg_speed) %>% arrange(desc(avg_speed))
nycflights %>% group_by(tailnum) %>% summarise(avg_speed=mean(avg_speed)) %>% arrange(desc(avg_speed))
speed_ds <- nycflights %>% group_by(tailnum) %>% summarise(avg_speed=mean(avg_speed)) %>% arrange(desc(avg_speed))
View(speed_ds)
View(speed_ds)
speed_ds <- nycflights %>% group_by(tailnum) %>% arrange(desc(avg_speed))
nycflights <- nycflights %>% mutate(avg_speed=(distance / 60) / air_time)
speed_ds <- nycflights %>% group_by(tailnum) %>% summarise(avg_speed=mean(avg_speed)) %>% arrange(desc(avg_speed))
speed_ds <- nycflights %>% group_by(tailnum) %>% summarise(avg_speed=avg_speed) %>% arrange(desc(avg_speed))
plot(avg_speed, distance)
plot(nycflights$avg_speed, nycflights$distance)
plot(nycflights$distance, nycflights$avg_speed)
plot(nycflights$avg_speed, nycflights$distance)
plot(nycflights$distance, nycflights$avg_speed)
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(origin) %>% summarise(ot_arr_rate = sum(arr_type == "on time" & dep_time == "on time") / n()) %>% arrange(desc(ot_arr_rate))
nycflights %>% summarise(ot_arr_rate = sum(arr_type == "on time" & dep_time == "on time") / n())
nycflights %>% summarise(ot_arr_rate = sum(arr_type == "on time" & dep_time == "delayed") / n())
library(statsr)
library(dplyr)
library(ggplot2)
data("kobe_basket")
View(kobe_basket)
View(kobe_basket)
kobe_streak <- calc_streak(kobe_basket$shot)
View(kobe_streak)
View(kobe_streak)
ggplot(data=kobe_streak, aes(x=length)) + geom_histogram(binwidth=1)
median(kobe_streak)
median(kobe_streak$length)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size=1, replace=TRUE)
sim_fair_coin <- sample(coin_outcomes, size=100, replace=TRUE)
table(sim_fair_coin)
sim_unfair_coin <- sample(coin_outcomes, size=100, replace=TRUE, prob=c(0.2, 0.8))
table(sim_unfair_coin)
shot_outcomes = c("H", "M")
sim_basket <- sample(shot_outcomes, size=1, replace=TRUE)
sim_basket <- sample(shot_outcomes, size=1, replace=TRUE, prob=c(0.45, 0.55))
sim_basket <- sample(shot_outcomes, size=133, replace=TRUE, prob=c(0.45, 0.55))
sim_streak <- calc_streak(sim_basket)
View(sim_streak)
View(sim_streak)
ggplot(data=sim_streak, aes(x=length)) + geom_histogram(binwidth = 1)
install.packages("rmarkdown")
install.packages("rmarkdown")
swirl()
library(swirl)
swirl()
c(0.5, 55, -10, 6)
vec <- c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
new_tf <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Axel")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"), sep" ")
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data=seq(1, 20), nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
setwd("E:/RProjects/GettingAndCleaningData")
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
